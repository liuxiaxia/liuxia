/*统计英文文章中，各单词出现的次数。设英文文章已装入字符缓冲区buf中*/

#include <ctype.h>
#include <stdio.h>
#include <string.h>
#include <memory.h>
#define LEN 100
int len=LEN;
/*
 *hash表元素定义
 */
typedef struct tag
{
	char * word;
	int count;
}NODE;
/*
 *hash缓冲区
 */
NODE hashMap[LEN];
/*
 *加入hash表中
 *参数word：单词串
 */
void init()
{
	memset(hashMap,'\0',LEN*sizeof(NODE));
}
/*
 *hash计算定义，即hash函数
 *参数str：单词串
 */
int hashcode(char * str)
{
	int sum=0;
	int i;
	char *p,c;
	for(i=0,p=str;*p;i++,p++)
	{
		c=isupper(*p)?*p+'a'-'A':*p;
		sum+=c*c*(i+1);
	}
	for(i=sum%len;i<len&& hashMap[i].word != NULL;i++)
	{
		if(stricmp(hashMap[i].word,str)==0)
			break;
	}
	if(i==len)
	{
		for(i=0;i<sum%len && hashMap[i].word !=NULL;i++)
		{
			if(stricmp(hashMap[i].word,str)==0)
				break;
		}
		if(i==sum%len) i=-1;
	}
	return i;
}
/*
 *加入hash表中
 *参数word：单词串
 */
int addToMap(char *word)
{
	int i,j;
	i=hashcode(word);
	if(i==-1) return 0;
	if(hashMap[i].word==NULL)
	{
		char *p=(char *)malloc(strlen(word)+1);
		for(j=0;(size_t)j<strlen(word);j++)
		{
			if(isupper(*(word+j))) *(word+j)+=32;
		}
		strcpy(p,word);
		hashMap[i].word=p;
		hashMap[i].count=1;
	}
	else
	{
		hashMap[i].count++;
	}
	return 1;
}
/*
 *打印hash表内容
 */
void print()
{
	int i;
	for(i=0;i<LEN;i++)
	{
		if(hashMap[i].word != NULL)
		{
			printf("\n%s : %d",hashMap[i].word,hashMap[i].count);
		}
	}
}
/*
 *读词并加入hash表中
 */
int readWord(char **buf)
{
	char word[30];
	int i=0;
	char c;
	for(;(c=**buf)&& !isalpha(c);(*buf)++);
	if(!**buf) return 0;
	for(i=0;(c=*(*buf+i))&&(isalpha(c)||c=='-');i++)
		word[i]=*(*buf+i);
	word[i]='\0';
	*buf+=i;
	return addToMap(word);
}
/*统计计数
 *参数buf：字符缓冲区
 */
void statistics(char *buf)
{
	while(*buf)
	{
		readWord(&buf);
	}
}
int main(int argc,char* argv[])
{
	char *s1="This is a good dog. Very very good dog.";
	statistics(s1);
	print();
	return 0;
}
